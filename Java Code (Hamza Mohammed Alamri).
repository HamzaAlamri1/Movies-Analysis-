package Movies;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import java.io.IOException;

public class Movies_analysis {

        public static class RatingMapper extends Mapper<Object, Text, Text, IntWritable> {
        private Text movieID = new Text();
        private IntWritable rating = new IntWritable();
        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
        String[] parts = value.toString().split(",");
        // Check if line is not header and has enough data
        if (parts.length > 3 && !parts[1].equals ("MovieID")) {
        movieID.set (parts[1]); // Assuming the 2nd column is MovieID rating. set (Integer-parseInt(parts[2])); // Assuming the 3rd column is Rating context. write (movieID, rating); 
    rating.set(Integer.parseInt(parts[2]));
    context.write(movieID,rating);
        }
        }
       
        public static class AverageReducer extends Reducer<Text, IntWritable, Text, DoubleWritable> {
                private DoubleWritable result = new DoubleWritable();
                public void reduce(Text key, Iterable<IntWritable>values, Context context) throws IOException, InterruptedException {
                int sum = 0;
                int count = 0;
                for (IntWritable val : values) {
                sum += val.get();
                count++;
                }
                result.set((double) sum / count);
                context.write(key, result);
                }
       
        }
                public static void main(String[] args) throws Exception {
                Configuration conf = new Configuration();
                Job rating = Job.getInstance(conf,"movie ratings analysis");
                rating.setJarByClass(Movies_analysis.class);
                rating.setMapperClass(RatingMapper.class);
                rating.setReducerClass(AverageReducer.class);
                rating.setOutputKeyClass(Text.class);
                rating.setOutputValueClass (IntWritable. class);
                FileInputFormat.addInputPath (rating, new Path (args[0]));
                FileOutputFormat.setOutputPath (rating, new Path (args[1]));
                System.exit(rating.waitForCompletion (true) ? 0 : 1);
                }
        }
}
